Object.assign(window.search, {"doc_urls":["chapter_1.html"],"index":{"documentStore":{"docInfo":{"0":{"body":4,"breadcrumbs":0,"title":0}},"docs":{"0":{"body":"이 문서는 지금 이 것을 보고 있는 바로 당신에게, 내 주장에 대해 어떠한 반대를 하더라도 몇 단락을 통해 설득하도록 노력할 것이다. 내가 펼칠 주장들은 다음과 같다. 첫번째, 범주는 마치 노다지와도 같은 프로그래밍 아이디어이다. 하스켈 프로그래머들은 오랫동안 이 자원들을 활용해 왔고, 그 아이디어가 다른 언어로 천천히 스며들고 있지만 그래도 이 과정은 너무 느리다. 속도를 높여야 한다. 두번째, 범주론은 프로그래머의 머리에 특히 잘맞는 수학이다. 그 이유는 범주론은 세부 사항을 다루기 보다는 합성를 다루기 때문이다. 범주론은 프로그램을 합성 가능하게 만드는 구조를 다룬다. 합성은 범주론의 근간을 이루는 것으로 범주 자체의 정의의 일부이다. 그리고 나는 합성이 프로그래밍의 본질이라고 강력하게 주장할 것이다. 우리는 위대한 엔지니어들이 서브루틴 [1] 이라는 개념을 생각해 내기 훨씬 전부터 무언가를 합성해 왔다. 얼마 전 구조적 프로그래밍 [2] 의 원리는 코드 블록을 합성가능하게 만들면서 프로그래밍에 혁명을 일으켰다. 그 후 객체를 구성하는 객체 지향 프로그래밍이 등장했다. 그리고 함수형 프로그래밍은 함수와 ADT를 구성하는 것 뿐만 아니라 다른 프로그래밍 패러다임에서는 사실상 불가능했던 동시성을 구성할 수 있게 해준다. 울랄라~ asdfsaf","breadcrumbs":"서론","id":"0","title":"서론"}},"length":1,"save":true},"fields":["title","body","breadcrumbs"],"index":{"body":{"root":{"1":{"df":1,"docs":{"0":{"tf":1.0}}},"2":{"df":1,"docs":{"0":{"tf":1.0}}},"a":{"d":{"df":0,"docs":{},"t":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{},"s":{"d":{"df":0,"docs":{},"f":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"f":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"breadcrumbs":{"root":{"1":{"df":1,"docs":{"0":{"tf":1.0}}},"2":{"df":1,"docs":{"0":{"tf":1.0}}},"a":{"d":{"df":0,"docs":{},"t":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{},"s":{"d":{"df":0,"docs":{},"f":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"f":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"title":{"root":{"df":0,"docs":{}}}},"lang":"English","pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5"},"results_options":{"limit_results":30,"teaser_word_count":30},"search_options":{"bool":"OR","expand":true,"fields":{"body":{"boost":1},"breadcrumbs":{"boost":1},"title":{"boost":2}}}});